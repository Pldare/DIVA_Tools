//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//   Authors: Waelwindows, Stewie 1.0
//   Version: 0.1
//   Purpose: Parse F dsc
// File Mask: .dsc
//  ID Bytes: 20 02 02 12
//------------------------------------------------

typedef uint uintbool <read=uintbool_read, write=uintbool_write>;
typedef int intbool <read=intbool_read, write=intbool_write>;
typedef uint msec <read=msec_read, write=msec_write, open=suppress>;
typedef ubyte ub_bgra[4] <read=ub_bgra_read, write=ub_bgra_write, comment=ub_bgra_comment>;
typedef int timeLength <read=tl_read, write=tl_write>;
typedef uint hex_id <read=hexid_read, write=hexid_write>;

const local float screenpos_unit = 10000.0;
typedef uint screenpos <read=pos_read, write=pos_write>;
const local float sub_degrees = 100000;
typedef int degrees <read=degree_read, write=degree_write, comment="Radians, Starts clockwise">;

enum <uint> note_type {
    TRIANGLE        = 0,
    CIRCLE          = 1,
    CROSS           = 2,
    SQUARE          = 3,
    ARROW_TRIANGLE  = 4,
    ARROW_CIRCLE    = 5,
    ARROW_CROSS     = 6,
    ARROW_SQUARE    = 7,
    HOLD_TRIANGLE   = 8,
    HOLD_CIRCLE     = 9,
    HOLD_CROSS      = 10,
    HOLD_SQUARE     = 11,
    STAR            = 12,
    HOLD_STAR     = 14,
    CHANCE_STAR     = 15,
};

float getDecimal(float f) {
    int fint = f;
    return f - fint;
}

string numToString(int i){
    string rslt;
    SPrintf(rslt, "%i", i);
    return rslt;
}

string floatToString(float i){
    string rslt;
    SPrintf(rslt, "%f", i);
    return rslt;
}

string floatStrAtDP(float i, int dp){
    int iInt = i;
    string value;
    string intonly;
    SPrintf(value, "%f", i);
    SPrintf(intonly, "%u", iInt);
    if (dp == 0 || i - iInt == 0) {
        value = SubStr(value, 0, Strlen(intonly));
    } else {
        value = SubStr(value, 0, dp+2);
    }
    return value;
}

string uintbool_read(uintbool i){
    switch (i) {
        case 0: return "False"; break;
        case 1: return "True"; break;
        default: return; break;
    }
}

void uintbool_write(uintbool &i,string s){
    switch (s) {
        case "False" : i = 0; break;
        case "True" : i = 1; break;
        case "0": i = 0; break;
        case "1": i = 1; break;
        default: break;
    }
}

string intbool_read(intbool i){
    switch (i) {
        case -1: return "False"; break;
        case 1: return "True"; break;
        default: return; break;
    }
}

void intbool_write(intbool &i,string s){
    switch (s) {
        case "False" : i = -1; break;
        case "True" : i = 1; break;
        case "-1": i = -1; break;
        case "1": i = 1; break;
        default: break;
    }
}

string msec_read(msec ms) {
    float sec = ms / 100000.0;
    float milsec = ms / 100.0;
    return floatStrAtDP(milsec, 2) + " ms, " + floatStrAtDP(sec, 2) + "s";
}

void msec_write(msec &ms, string s) {
    float value;
    uint multiplier;
    SScanf( s, "%f", value);
    if (SubStr(s, Strlen(s)-1, 1) == "s"){
        multiplier = 100000;
    } else {
        multiplier = 1000;
    }
    ms = value * multiplier;
}

string ub_bgra_read(ub_bgra ub){
    string b;
    string g;
    string r;
    string a;
    SPrintf(b, "%u, ", ub[0]);
    SPrintf(g, "%u, ", ub[1]);
    SPrintf(r, "%u, ", ub[2]);
    SPrintf(a, "%u", ub[3]);
    return "(" +b+g+r+a+")";
}

void ub_bgra_write(ub_bgra &ub, string s){
    SScanf( s, "(%u, %u, %u, %u)", ub[0], ub[1], ub[2], ub[3]);
}

string ub_bgra_comment(ub_bgra ub){
    string b;
    string g;
    string r;
    string a;
    SPrintf(b, "%X", ub[0]);
    SPrintf(g, "%X", ub[1]);
    SPrintf(r, "%X", ub[2]);
    return "BGRA Color " + "#"+b+g+r;
}

string pos_read(screenpos sp){
    return "At " + floatStrAtDP(sp / screenpos_unit, 2);
}

void pos_write(screenpos &sp, string s) {
    float prenum;
    SScanf( s, "%f", prenum);
    sp = prenum * screenpos_unit;
}

string degree_read(degrees d) {
    float degree = d / sub_degrees;
    degree = d / 1000;
    degree *= 0.01;
    string rslt;
    if (degree == 1)
    {
        rslt = "1 radian";
    } else {
        rslt = floatStrAtDP(degree, 2) + " radians";   
    }
    return rslt;
}

void degree_write(degrees &d, string s) {
    float value;
    SScanf(s, "%f", value);
    d = value * sub_degrees;
}

string tl_read(timeLength tl) {
    if (tl == -1) {
        return "(Disabled)";
    }
    float sec = tl / 100000.0;
    float milisec = tl / 100.0;
    return floatStrAtDP(milisec, 2) + " ms, " + floatStrAtDP(sec, 2) + "s long";
}

void tl_write(timeLength &tl, string s) {
    float value;
    SScanf(s, "%f", value);
    if (SubStr(s, Strlen(s)-1, 1) == "s") {
        tl = value * 100000;
    } else {
        tl = value * 100;
    }
}

string hexid_read(hex_id hid) {
    string rslt;
    SPrintf(rslt, "0x%X", hid);
    return rslt + " ID";
};

void hexid_write(hex_id &hid, string s){
    uint id;
    SScanf(s, "%x", id);
    hid = id;
}

typedef struct {
    char magic[4] <name="Magic", format=hex>;
} HEADER <name="Header", bgcolor=cRed>;

//0x00
typedef struct {
    uint id <hidden=1>;
    if (!FEof())
        uint unk;
} END <name="End", bgcolor=cBlue, optimize=false>;

//0x01
typedef struct {
    uint id <hidden=1>;
    msec timestamp <name="Timestamp">;
} TIME <name="Function Timestamp", bgcolor=cAqua>;

//0x02
typedef struct {
    uint id <hidden=1>;
    uint playerID <name="Player ID">;
    uint xtrans <name="X Transform">;
    uint ytrans <name="Y Transform">;
    uint ztrans <name="Z Transform">;
} MIKU_MOVE <name="MIKU - Move", bgcolor=cBlue>;

//0x03
typedef struct {
    uint id <hidden=1>;
    uint playerID <name="Player ID">;
    int rotation <name="Rotation">;
} MIKU_ROT <name="MIKU - Rotate", bgcolor=cBlue>;

//0x04
typedef struct {
    uint id <hidden=1>;
    uint playerID <name="Player ID">;
    uintbool displayState <name="Display state">;
} MIKU_DISP <name="MIKU - Display", bgcolor=cBlue>;

//0x05
typedef struct {
    uint id <hidden=1>;
    uint playerID <name="Player ID">;
    uintbool shadowState <name="State">;
} MIKU_SHADOW <name="MIKU - Shadow", bgcolor=cBlue>;

//0x06
typedef struct {
    uint id <hidden=1>;
    note_type     type <name="Note Type">;
    timeLength    hold_length <name="Hold Length">;
    intbool       is_hold_end <name="Hold End">;
    screenpos     pos_x <name="X Position", comment="Ends at 50">;
    screenpos     pos_y <name="Y Position", comment="Ends at 30">;
    degrees       oscil_angle <name="Oscillation Angle">;
    int           oscil_cycle <name="Oscillation Cycles", comment="0.5 Cycle / Timeout">;
    degrees       entry_angle <name="Entry angle">;
    uint          oscil_altitude <name="Oscillation Altitude">;
    uint          timeOut <name="Timeout">;
    uint          unk;
} TARGET <name="Note", bgcolor=cGreen>;

//0x07
typedef struct {
    uint id <hidden=1>;
    uint playerID <name="Player ID">;
    hex_id anim_id <name="Animation ID", comment="Based on", format=hex>;
    timeLength time <name="Animation Start time">;
    uint speed <name="Speed">;
} SET_MOTION <name="Set Motion", bgcolor=cBlue>;

//0x08
typedef struct {
    uint id <hidden=1>;
    uint playerID <name="Player ID">;
    uintbool mode <name="Mode">;
} SET_PLAYDATA <name="Set Playdata", bgcolor=cBlue>;

//0x09
typedef struct {
    uint id <hidden=1>;
    uint fxID <name="Effect ID">;
    uint unk[5];
} EFFECT <name="Effect", bgcolor=cBlue>;

//0x0A
typedef struct {
    uint id <hidden=1>;
} FADEIN_FIELD <name="Field Fade in", bgcolor=cBlue>;

//0x0B
typedef struct {
    uint id <hidden=1>;
    uint fxID <name="Effect ID">;
    uint unk[5];
} EFFECT_OFF <name="Effect off", bgcolor=cBlue>;

//0x0C
typedef struct {
    uint id <hidden=1>;
    uint unk[2] <hidden=1>;
} SET_CAMERA <name="Set Camera", bgcolor=cBlue>;

//0x0D
typedef struct {
    uint id <hidden=1>;
    uint unk[2] <hidden=1>;
} DATA_CAMERA <name="Data - Camera", bgcolor=cBlue>;

//0x0E
typedef struct {
    uint id <hidden=1>;
    hex_id field_id <name="Field ID", comment="Based on field_db">;
} CHANGE_FIELD <name="Change Field (Stage)", bgcolor=cBlue>;

//0x0F
typedef struct {
    uint id <hidden=1>;
    hex_id field_id <name="Field ID", comment="Based on field_db">;
    uintbool state <name="State?">;
} HIDE_FIELD <name="Hide Field (Stage)", bgcolor=cBlue>;

//0x10
typedef struct {
    uint id <hidden=1>;
    hex_id field_id <name="Field ID", comment="Based on field_db">;
    int unk[3];
} MOVE_FIELD <name="Move Field (Stage)", bgcolor=cBlue>;

//0x11
typedef struct {
    uint id <hidden=1>;
} FADEOUT_FIELD <name="Field Fade out", bgcolor=cBlue>;

//0x12
typedef struct {
    uint id <hidden=1>;
    uint player_id <name="Player ID">;
    hex_id anim_id <name="Anim ID", comment="Bool, just for blinking">;
    uint unk <hidden=1>;
} EYE_ANIM <name="Eye Animation", bgcolor=cBlue>;

//0x13
typedef struct {
    uint id <hidden=1>;
    uint player_id <name="Player ID">;
    hex_id anim_id <name="Anim ID">;
    uint unk[3] <hidden=1>;
} MOUTH_ANIM <name="Mouth Animation", bgcolor=cBlue>;

//0x14
typedef struct {
    uint id <hidden=1>;
    uint player_id <name="Player ID">;
    hex_id anim_id <name="Anim ID">;
    uint unk[3] <hidden=1>;
} HAND_ANIM <name="Hand Animation", bgcolor=cBlue>;

//0x15
typedef struct {
    uint id <hidden=1>;
    uint player_id <name="Player ID">;
    hex_id anim_id <name="Anim ID">;
    uint unk <hidden=1>;
} LOOK_ANIM <name="Look Animation", bgcolor=cBlue>;

//0x16
typedef struct {
    uint id <hidden=1>;
    uint player_id <name="Player ID">;
    hex_id exp_id <name="Expression ID", format=hex>;
    timeLength unk1 <name="Expression Start-time">;
    int unk2 <name="Speed?", comment="Disabled if set to -1">;
} EXPRESSION <name="Expression", bgcolor=cBlue>;

//0x17
typedef struct {
    uint id <hidden=1>;
} LOOK_CAMERA <name="Look Camera", bgcolor=cBlue>;

//0x18
typedef struct {
    uint id <hidden=1>;
    hex_id lyric_id <name="Lyric ID">;
    ub_bgra color <name="Color">;
} LYRIC_COLOR <name="Lyrics - Color", bgcolor=cBlue>;

//0x19
typedef struct {
    uint id <hidden=1>;
} PLAY_MUSIC <name="Play Music", bgcolor=cBlue, comment="Neccessary to start the song">;

//0x1A
typedef struct {
    uint id <hidden=1>;
    uint unk[2];
} MODE_SELECT <name="Mode Select", bgcolor=cBlue>;

//0x07
typedef struct {
    uint id <hidden=1>;
    hex_id anim_id <name="Animation ID", comment="Based on", format=hex>;
    timeLength time <name="Animation Start time">;
    uint speed <name="Speed">;
} EDIT_MOTION <name="EDIT - Motion", bgcolor=cBlue, comment="Unused">;

//0x1C
typedef struct {
    uint id <hidden=1>;
    uint bpm <name="BPM">;
    uint noteSpeed <name="Note speed">;
} BAR_TIME_SET <name="Bar time set", bgcolor=cBlue, comment="Globally changes the BPM for following notes">;

//0x1D
typedef struct {
    uint id <hidden=1>;
    uint unk[2];
} SHADOW_HEIGHT <name="Shadow Height", bgcolor=cBlue>;

//0x1E
typedef struct {
    uint id <hidden=1>;
} EDIT_FACE <name="Edit - Face", bgcolor=cBlue>;

//0x1F
typedef struct {
    uint id <hidden=1>;
    uint unk[21];
} MOVE_CAMERA <name="MOVE - Camera", bgcolor=cBlue>;

//0x20
typedef struct {
    uint id <hidden=1>;
} PV_END <name="PV End", bgcolor=cBlue, comment="Ends the song when triggered">;

//0x21
typedef struct {
    uint id <hidden=1>;
} SHADOWPOS <name="Shadow Position", bgcolor=cBlue, comment="Unused">;

//0x22
typedef struct {
    uint id <hidden=1>;
    hex_id lyric_id <name="Lyric ID">;
    ub_bgra color <name="Color">;
} EDIT_LYRIC <name="EDIT - Lyrics", bgcolor=cBlue>;

//0x23
typedef struct {
    uint id <hidden=1>;
    hex_id lyric_id <name="Lyric ID">;
    ub_bgra color <name="Color">;
} EDIT_TARGET <name="EDIT - Target", bgcolor=cBlue, comment="Crashes the game">;

//0x24
typedef struct {
    uint id <hidden=1>;
    hex_id anim_id <name="Anim ID">;
    uint unk[3] <hidden=1>;
} EDIT_MOUTH <name="EDIT - Mouth", bgcolor=cBlue>;

//0x25
typedef struct {
    uint id <hidden=1>;
    uint playerID<name="Player ID", comment="Only used in edit mode">;
} SET_CHARA <name="EDIT - Set Character", bgcolor=cBlue>;

//0x26
typedef struct {
    uint id <hidden=1>;
    uint xtrans <name="X Transform">;
    uint ytrans <name="Y Transform">;
    uint ztrans <name="Z Transform">;
} EDIT_MOVE <name="EDIT - Move", bgcolor=cBlue>;

//0x27
typedef struct {
    uint id <hidden=1>;
    uintbool shadowState <name="State">;
} EDIT_SHADOW <name="EDIT - Shadow", bgcolor=cBlue>;

//0x28
typedef struct {
    uint id <hidden=1>;
    uintbool shadowState <name="State">;
} EDIT_EYELID <name="EDIT - Eyelid", bgcolor=cBlue>;

//0x29
typedef struct {
    uint id <hidden=1>;
    hex_id anim_id <name="Anim ID", comment="Bool, just for blinking">;
    uint unk <hidden=1>;
} EDIT_EYE <name="EDIT - Eye", bgcolor=cBlue>;

//0x2A
typedef struct {
    uint id <hidden=1>;
    hex_id item <name="Item ID">;
} EDIT_ITEM <name="EDIT - Set Character Item", bgcolor=cBlue>;

//0x2B
typedef struct {
    uint id <hidden=1>;
    uint fxID <name="Effect ID">;
} EDIT_EFFECT <name="EDIT - Set Effect", bgcolor=cBlue>;

//0x2C
typedef struct {
    uint id <hidden=1>;
    uintbool display_state <name="Display State">;
} EDIT_DISP <name="EDIT - Set Character Display State", bgcolor=cBlue>;

//0x2D
typedef struct {
    uint id <hidden=1>;
    hex_id anim_id <name="Anim ID">;
    uint unk[3] <hidden=1>;
} EDIT_HAND_ANIM <name="EDIT - Hand Animation", bgcolor=cBlue>;

//0x2E
typedef struct {
    uint id <hidden=1>;
} AIM <name="AIM", bgcolor=cBlue>;

//0x2F
typedef struct {
    uint id <hidden=1>;
    uint playerID <name="Player ID">;
    hex_id item <name="Item ID">;
} HAND_ITEM <name="Hand Item", bgcolor=cBlue>;

//0x30
typedef struct {
    uint id <hidden=1>;
    uint blushID <name="Blush ID", comment="Based on", format=hex>;
} EDIT_BLUSH <name="EDIT - Set Character Blush", bgcolor=cBlue>;

//0x31
typedef struct {
    uint id <hidden=1>;
    uint clip <name="New Near Clip">;
} NEAR_CLIP <name="Near Clip", bgcolor=cBlue>;

//0x34
typedef struct {
    uint id <hidden=1>;
    uint speed <name="Fade Speed">;
    uint fade_in <name="Fade In">;
    uint fade_out <name="Fade Out">;
    uint red <name="Red">;
    uint green <name="Green">;
    uint blue <name="Blue">;
} SCENE_FADE <name="Scene Fade", bgcolor=cBlue>;

//0x3A
typedef struct {
    uint id <hidden=1>;
    uint bpm <name="BPM">;
} TARGET_FLYING_TIME <name="Note Fly Time", bgcolor=cBlue, comment="Same as Bar time set, only used in FT">;

//0x3D
typedef struct {
    uint id <hidden=1>;
    uint unk[5];
} ITEM_ANIM <name="Item Animation", bgcolor=cBlue>;

//0x41
typedef struct {
    uint id <hidden=1>;
    uint mode <name="Mode">;
} PV_BRANCH_MODE <name="PV - Branch Mode", bgcolor=cYellow>;

//0x42
typedef struct {
    uint id <hidden=1>;
    uint unk[3];
} DATA_CAMERA_START <name="Data - Camera Start", bgcolor=cBlue>;

//0x43
typedef struct {
    uint id <hidden=1>;
    uintbool play <name="Play">;
} MOVIE_PLAY <name="MOVIE - Play", bgcolor=cBlue, comment="Plays movie, but doens't display">;

//0x44
typedef struct {
    uint id <hidden=1>;
    uint display <name="Display">;
} MOVIE_DISP <name="MOVIE - Display", bgcolor=cBlue, comment="Displays movie, but doesn't play">;

//0x47
typedef struct {
    uint id <hidden=1>;
    uint unk[3];
} OSAGE_MV_CCL <name="Osage move collider", bgcolor=cBlue>;

//0x48
typedef struct {
    uint id <hidden=1>;
    uint playerID <name="Player ID">;
    uint color <name="Color">;
} CHARA_COLOR <name="Character - Color", bgcolor=cBlue>;

//0x49
typedef struct {
    uint id <hidden=1>;
    uint seID <name="Sound ID">;
} SE_EFFECT <name="Chance Time Success Sound", bgcolor=cBlue>;

//0x51
typedef struct {
    uint id <hidden=1>;
    uint unk[24];
} EDIT_CAMERA <name="EDIT - Camera", bgcolor=cBlue>;

//0x6B
typedef struct {
    uint id <hidden=1>;
    uint lyricID;
    int unk2;
} UNK1 <name="NAME", bgcolor=cBlue>;

//0x4
typedef struct {
    uint id <hidden=1>;
} TST <name="NAME", bgcolor=cBlue>;

typedef struct {
    local int i;
    local int pos;
    local uint func_id;
    local uint isbreak;
    for (i=0; i<5000; i++){
        if (isbreak == 1){
            break;
        }
        pos = FTell();
        if (FEof())
            break;
        func_id = ReadUInt();
        switch(func_id){
            case 0x00: END end; break;
            case 0x01: TIME timestamp; break;
            case 0x02: MIKU_MOVE mmove; break;
            case 0x03: MIKU_ROT mrot; break;
            case 0x04: MIKU_DISP mikdisp; break;
            case 0x05: MIKU_SHADOW mshadow; break;
            case 0x06: TARGET note; break;
            case 0x07: SET_MOTION smotion; break;
            case 0x08: SET_PLAYDATA splaydata; break;
            case 0x09: EFFECT fx; break;
            case 0x0A: FADEIN_FIELD fadeinf; break;
            case 0x0B: EFFECT_OFF fxoff; break;
            case 0x0C: SET_CAMERA setcamera; break;
            case 0x0D: DATA_CAMERA dcam; break;
            case 0x0E: CHANGE_FIELD cfield; break;
            case 0x0F: HIDE_FIELD hidef; break;
            case 0x10: MOVE_FIELD movef; break;
            case 0x11: FADEOUT_FIELD fadeoutf; break;
            case 0x12: EYE_ANIM eanim; break;
            case 0x13: MOUTH_ANIM manim; break;
            case 0x14: HAND_ANIM hanim; break;
            case 0x15: LOOK_ANIM lanim; break;
            case 0x16: EXPRESSION exp; break;
            case 0x17: LOOK_CAMERA lcam; break;
            case 0x18: LYRIC_COLOR lcolor; break;
            case 0x19: PLAY_MUSIC pmusic; break;
            case 0x1A: MODE_SELECT mselect; break;
            case 0x1B: EDIT_MOTION editmot; break;
            case 0x1C: BAR_TIME_SET bts; break;
            case 0x1D: SHADOW_HEIGHT sheight; break;
            case 0x1E: EDIT_FACE editface; break;
            case 0x1F: MOVE_CAMERA mov_cam; break;
            case 0x20: PV_END pvend; break;
            case 0x21: SHADOWPOS shadpos; break;
            case 0x22: EDIT_LYRIC editlyric; break;
            case 0x23: EDIT_TARGET editnote; break;
            case 0x24: EDIT_MOUTH editmouth; break;
            case 0x25: SET_CHARA schara; break;
            case 0x26: EDIT_MOVE editmov; break;
            case 0x27: EDIT_SHADOW editshadow; break;
            case 0x28: EDIT_EYELID editeyelid; break;
            case 0x29: EDIT_EYE editeye; break;
            case 0x2A: EDIT_ITEM eitem; break;
            case 0x2B: EDIT_EFFECT efx; break;
            case 0x2C: EDIT_DISP edisp; break;
            case 0x30: EDIT_BLUSH eblush; break;
            case 0x31: NEAR_CLIP nclip; break;
            case 0x34: SCENE_FADE sfade; break;
            case 0x3A: TARGET_FLYING_TIME tft; break;
            case 0x3D: ITEM_ANIM itmanim; break;
            case 0x41: PV_BRANCH_MODE pbm; break;
            case 0x42: DATA_CAMERA_START dcs; break;
            case 0x43: MOVIE_PLAY mplay; break;
            case 0x44: MOVIE_DISP mdisp; break;
            case 0x47: OSAGE_MV_CCL omvccl; break;
            case 0x48: CHARA_COLOR ccolor; break;
            case 0x49: SE_EFFECT sefx; break;
            case 0x51: EDIT_CAMERA ecam; break;
            case 0x6B: UNK1 unk; break;
            case 0x6D: UNK1 unk; break;
            default: Printf("Unimplemented func_id (0x%X) at *0x%X offset \n", func_id, pos); isbreak = 1; break;
        }
    }
} DSC_FILE <name="DSC File", open=true>;

LittleEndian();
//BigEndian();
HEADER header;
DSC_FILE dsc;
