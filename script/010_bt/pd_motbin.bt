//------------------------------------------------
//--- 010 Editor v7.0.2 Binary Template
//
//      File: *.bin
//   Authors: Waelwindows, Minmode
//   Version: 0.0
//   Purpose: Parse PD ".bin" anim format.
//------------------------------------------------

//------------------------------------------------

typedef struct{
    uint animInfoOffset <name="Animation Info Offset">;
    uint animUNKDataOffset <name="UNK Struct Offset">;
    uint animDataOffset <name="Animation Data Offset">;
    uint boneDataOffset <name="Bone Data Offset">;
} HEADER <name="File Header", bgcolor=cRed>;

typedef struct(uint offset)
{
    local uint counter = 0x10;
    for (counter; FTell() < offset; counter++)
    {
        HEADER header <name="Sub-header", optimize=false, bgcolor=cLtRed>;
    }
} SUBHEADER <name="Anim Sub-Headers", bgcolor=cBlue>;

typedef struct{
    ushort unk;
    ushort frameCount <name="Frame Count">;
} ANIMINFO <name="Animation Info", bgcolor=cGreen>;

typedef struct{
    uint unk[7];
} UNKCHILD <name="UNK Data child">;

//This struct's size changes per game
// DT = 138
// F = 140
// FT = 148
typedef struct(int animDataStart){
    ushort unk[10];
    ushort reserved[25] <name="Reserved", comment="Possibly unused?">;
    ushort const1[2] <name="Const?">;
    //ushort value1[20];
    ushort value[6];
    ushort const2[4];
    ushort value2[10];
    ushort const3[9];

} ANIMUNK <name="Animation Settings?", comment="Size is game dependant", bgcolor=cLtBlue>;

typedef struct(int boneDataStart, int flagCount){
    char flags[4 * flagCount] <name="Flags">;
    ushort frameID <name="Frame ID">;
    /* DT MODE */
    if (frameID % 2 == 0)
    {
        ushort padding <name="Padding">;
    }
    local int counter = 0;
    struct {
        for (counter; counter < frameID; counter++)
        {
            ushort frameCount <name="Frame Count", optimize=false>;
        }
    } frameCounts <name="Frame Counts">;
    counter = 0;
    struct(int boneDataStart) {
        for (counter; counter < frameID; counter++){
            if (FTell() >= boneDataStart)
            {
                break;
            }
            float value <name="Value", optimize=false>;
            if (FTell() >= boneDataStart)
            {
                break;
            }
            float unk <optimize=false>;
        }
    } data(boneDataStart) <name="Animation Values">;
    /* F MODE
    if (frameID % 2 == 0)
    {
        ushort padding <name="Padding">;
    }
    */
} ANIMDATA <name="Animation Data", bgcolor=cGreen>;

string floatStrAtDP(float i, int dp){
    int intonly = i;
    string value;
    string nofloat;
    SPrintf(value, "%f", i);
    SPrintf(nofloat, "%i", intonly);
    return nofloat + SubStr(value, Strlen(nofloat), dp+1);
}

string motDataValue(ANIMDATA &data) {
    string str;
    SPrintf(str, "%u frames, ", data.frameID);
    str += floatStrAtDP(((data.frameID / 60.0f) / 60.0f) / 2.0f, 2) + " min";
    return str;
}

typedef struct(int nextAnimInfo){
    local int bCount = 0;
    local int endOffset = nextAnimInfo;
    if (nextAnimInfo == 0)
    {
        endOffset = FileSize();
    }
    for (bCount; FTell() < endOffset; ++bCount)
    {
        short id <name="Bone ID">;
    }
} BONEDATA <name="Bone Data", comment="Corresponds to the mot_db.bin", bgcolor=cLtRed>;

typedef struct(int amount) {
        local uint size = amount;
        int pad[amount];
        Printf("Pad of %u ints size at %X \n", amount, FTell());
    } DATAPAD ;

string padInfo(DATAPAD &pad)
{
    string size;
    SPrintf(size, "%u ints at 0x%X", pad.size, FTell() );
    return size; 
}

typedef struct(int animData, int boneDataStart, int fcount){
    if (1 <= animData) { ANIMDATA xaxis(boneDataStart, fcount) <name="X Axis Animation", read=motDataValue>; }
    if (2 <= animData) { ANIMDATA yaxis(boneDataStart, fcount) <name="Y Axis Animation", read=motDataValue>; }
    if (3 <= animData) { ANIMDATA zaxis(boneDataStart, fcount) <name="Z Axis Animation", read=motDataValue>; }
} BONEANIMDATA <name="Bone Animation Data", read=boneAnimRead>;

string boneAnimRead(BONEANIMDATA &boneAnim)
{
    float frameValue = (boneAnim.xaxis.frameID + boneAnim.yaxis.frameID + boneAnim.zaxis.frameID) / 3.0f;
    float minValue = (((frameValue) / 60.0f) / 60.0f) / 2.0f;
    return floatStrAtDP(frameValue, -1) + " frames, " + floatStrAtDP(minValue, 2) + " mins";
}

typedef struct(int animDataStart, int boneDataStart, int nextAnimInfo){
    ANIMINFO animInfo <optimize=false>;
    local int c1 = 0;
    Printf("Anim data start is : %u \n", animDataStart);
    ANIMUNK unk(animDataStart);
    Printf("Bone data offst is : %u \n", boneDataStart);
    FSeek(animDataStart);
    local int sCount = 0;
    local int fCount = 0;
    struct(int boneDataStart){
    local int motDataLim = 90;
    for (sCount; sCount <motDataLim; ++sCount)
        {
            Printf("loop iteration %u \n", sCount);
            if (FTell() >= boneDataStart)
            {
                break;
            }
            /* Shushitsu Manual Padding */
            /* 
            if (sCount ==   7) { DATAPAD pad( 1) <name="Data Pad", read=padInfo, comment="Manual inscript pads to correct struct", bgcolor=cLtBlue>; }
            if (sCount ==  11) { DATAPAD pad( 3) <name="Data Pad", read=padInfo, comment="Manual inscript pads to correct struct", bgcolor=cLtBlue>; }
            if (sCount ==  17) { DATAPAD pad( 2) <name="Data Pad", read=padInfo, comment="Manual inscript pads to correct struct", bgcolor=cLtBlue>; }
            if (sCount ==  21) { DATAPAD pad( 5) <name="Data Pad", read=padInfo, comment="Manual inscript pads to correct struct", bgcolor=cLtBlue>; }
            if (sCount ==  26) { DATAPAD pad( 3) <name="Data Pad", read=padInfo, comment="Manual inscript pads to correct struct", bgcolor=cLtBlue>; }
            if (sCount ==  54) { DATAPAD pad(11) <name="Data Pad", read=padInfo, comment="Manual inscript pads to correct struct", bgcolor=cLtBlue>; }
            if (sCount ==  59) { DATAPAD pad( 3) <name="Data Pad", read=padInfo, comment="Manual inscript pads to correct struct", bgcolor=cLtBlue>; }
            if (sCount ==  87) { DATAPAD pad( 9) <name="Data Pad", read=padInfo, comment="Manual inscript pads to correct struct", bgcolor=cLtBlue>; }
            if (sCount ==  93) { DATAPAD pad( 1) <name="Data Pad", read=padInfo, comment="Manual inscript pads to correct struct", bgcolor=cLtBlue>; }
            if (sCount == 101) { DATAPAD pad( 1) <name="Data Pad", read=padInfo, comment="Manual inscript pads to correct struct", bgcolor=cLtBlue>; }
            */
            /* Yellow Manual Padding*/
            /*
            if (sCount == 6 ||
                sCount == 56 ) { fCount = 1; }
            if (sCount == 17 || 
                sCount == 22 ||
                sCount == 48) { fCount = 2; }
            if (sCount == 11 || 
                sCount == 26 || 
                sCount == 31 || 
                sCount == 39) { fCount = 3; }
            if (sCount == 34) { fCount = 14;}
            if (sCount == 42) { fCount = 12;}
            */
            //ANIMDATA animData(boneDataStart, fCount) <name="Motion Data", read=motDataValue, optimize=false>;
            /*
            if (sCount == 7) { fCount = 1;}
            if (sCount == 12) { fCount = 3;}
            */
            if (sCount == 10) { fCount = 1;}
            if (sCount == 14) { fCount = 2;} //337B65
            if (sCount == 20) { fCount = 2;}
            if (sCount == 26) { fCount = 2;}
            if (sCount == 29) { fCount = 12;}
            if (sCount == 32) { fCount = 15;}
            if (sCount == 38) { fCount = 3;}
            if (sCount == 41) { fCount = 1;}
            if (sCount == 46) { fCount = 2;}
            if (sCount == 51) { fCount = 1;}
            if (sCount == 56) { fCount = 1;}
            if (sCount == 61) { fCount = 3;}
            if (sCount == 66) { fCount = 11;}
            if (sCount == 72) { fCount = 3;}
            if (sCount == 75) { fCount = 1;}
            if (sCount == 80) { fCount = 2;}
            if (sCount == 85) { fCount = 1;}
            ANIMDATA animData(boneDataStart, fCount) <name="Motion Data", read=motDataValue, optimize=false>;
            //BONEANIMDATA boneAnimData(3, boneDataStart, fCount);
            fCount = 0;
        }
    } ANIMDATAGROUP(boneDataStart) <name="Animation Data">;
    Printf("Next anim info is : %u \n", nextAnimInfo);
    FSeek(boneDataStart);
    BONEDATA boneData(nextAnimInfo);
} ANIM <name="Animation">;

LittleEndian();
HEADER hd;
SUBHEADER subHD(hd.animInfoOffset);

Printf( "Size of header %u", sizeof(subHD) / sizeof(HEADER) );
struct{
    local int counter = -1;
    local int animCount;
    if (subHD.header[0].animInfoOffset == 0)
    {
        animCount == 0;
    } else {
        animCount = sizeof(subHD) / sizeof(HEADER);
    }
    for (counter; counter < animCount; ++counter)
    {
        if (counter == -1)  
        {
            FSeek(hd.animInfoOffset);
            ANIM anim(hd.animDataOffset, hd.boneDataOffset, subHD.header[0].animInfoOffset);
        } else {
            if (counter == sizeof(subHD) / sizeof(HEADER) - 1)
            {
                ANIM anim(subHD.header[counter].animDataOffset, subHD.header[counter].boneDataOffset, 0);
            } else
            {
                ANIM anim(subHD.header[counter].animDataOffset, subHD.header[counter].boneDataOffset, subHD.header[counter+1].animInfoOffset);
            }
        }
    }
} ANIMS <name="Animations">;
