//--------------------------------------
//--- 010 Editor v6.0.3 Binary Template
//
// File: *.dsc
// Author: Brolijah
// Contact: brolijahrh@gmail.com
//    Discord: Brolijah#8502
// Revision: 0.7b   March-04-2017
// Purpose: PVSC (*.dsc) files for Project DIVA F 2nd.
//    Parses the contained note table into a list. This
//    List can be exported to a CSV spreadsheet.
//--------------------------------------

typedef uint vec2[2] <read=vec2_read, write=vec2_write>;
typedef int  rad <read=rad_read, write=rad_write>;

string vec2_read(vec2 vec)
{
    string rslt;
    SPrintf(rslt, "(%.1f, %.1f)", vec[0] / 10000.0, vec[1] / 10000.0);
    return rslt;
    //return "(1, 2)";
}

void vec2_write(vec2 &vec, string str)
{
    SScanf(str, "(%u, %u)", vec[0], vec[1]);
}

string rad_read(rad r)
{
    string rslt;
    SPrintf(rslt, "%.2f radians", r / 10000.0);
    return rslt;
}

void rad_write(rad &r, string str)
{
    float value;
    SScanf(str, "%f", value);
    r = value * 10000;
}

uint conv_to_ms(uint t)
{
    t /= 10;
    if (t%10 >= 5)
        { t = ((t-(t%10))+10) / 10; }
    else
        { t /= 10; }
    return t;
}

typedef struct {
        UINT    functionID <name="Function ID", bgcolor=cGray>;
        UINT    timeStamp <name="Timestamp", bgcolor=cLtRed>;
} TIME <name="0x01, TIME">;

typedef struct {
    TIME    time;
    UINT    functionID <name="Function ID", bgcolor=cGray>;
    UINT    type <name="Note Type", bgcolor=cAqua, comment=GetNoteType>;
    INT     holdLentgh <name="Hold Time", bgcolor=cLtRed>;
    INT     isHoldEnd <name="Is Hold End?", bgcolor=cDkYellow>;
    vec2    position <name="Position">;
    rad     entryAngle <name="Oscillation Entry Angle", bgcolor=cSilver>;
    INT     oscilFrequency <name="Oscillation Frequency", comment="Could also be X Pi Radians", bgcolor=cLtGreen>;
    rad     oscilAngle <name="Entry Angle", bgcolor=cSilver>; //, hidden=true>;
    UINT    oscilAmplitude <name="Oscillation Amplitude", bgcolor=cLtBlue>;
    UINT    noteTimeoutMS <name="Note Timer (ms)", bgcolor=cLtRed>;
    UINT    unk <name="Unknown Variable", bgcolor=cRed>; //, hidden=true>;
    INT     pad <name="Padding", bgcolor=cYellow, hidden=true>;
} NOTE_STRUCT;

typedef struct {
    LittleEndian();
    struct HEADER {
        char   divaType[4]<name="Content File Type">;
        uint   contentsLength <name="Byte Length of File">;
        uint   headerSize <name="Header size">;
        uint   version <name="File version", format=hex>;
        uint   ebr <hidden=true>;
        uint   subBytesize <name="Byte Length of File">;
        uint   ebr1[2] <hidden=true>;
        uint   unk1 <name="UNK1">;
        uint   ebr2[3] <hidden=true>;
        uint   unkUInt2 <name="Unknown UInt32 #2", comment="This is the same between PVs of the same song. But it isn't length.">;
        uint   ebr3[3] <hidden=true>;
    } header <name="Header", bgcolor=cGreen>;
    
    BigEndian();
    struct UNK {
        uint unk[2];
    } unk <bgcolor=cLtBlue>;

    struct NOTE_TABLE {
        //byte start[8] <hidden=true>;
        local uint counter = 8;
        while (counter <= header.subBytesize-60)
        {
            NOTE_STRUCT entry <name="Note Entry", read=ReadNoteType>;
            counter += 60;
        }
        byte padding[header.contentsLength-counter] <bgcolor=cPurple, hidden=true>;
    } note_table <name="Note Chart", open=true>;
} DSC_FILE;

string GetNoteType (uint note)
{
    if (note == 0)
        {return "Triangle";}
    else if (note == 1)
        {return "Circle";}
    else if (note == 2)
        {return "Cross";}
    else if (note == 3)
        {return "Square";}
    else if (note == 4)
        {return "Triangle-Up";}
    else if (note == 5)
        {return "Circle-Right";}
    else if (note == 6)
        {return "Cross-Down";}
    else if (note == 7)
        {return "Square-Left";}
    else if (note == 8)
        {return "Triangle Hold";}
    else if (note == 9)
        {return "Circle Hold";}
    else if (note == 10)
        {return "Cross Hold";}
    else if (note == 11)
        {return "Square Hold";}
    else if (note == 12)
        {return "Star";}
    else if (note == 14)
        {return "Double Star";}
    else if (note == 15)
        {return "Chance Star";}
    else if (note == 22)
        {return "Linked Star";}
    else if (note == 23)
        {return "Linked Star End";}
    else {return "What the fuck?";}
}

string ReadNoteType(NOTE_STRUCT &tbl)
{
    local uint note = tbl.type;
    local string s;
    SPrintf(s, "Seconds: %.3f  ;   Note: %s", (float) (conv_to_ms(tbl.time.timeStamp) + tbl.noteTimeoutMS) / 1000, GetNoteType(note));
    return s;
}

DSC_FILE dsc <name="DSC Decrypted Contents", open=true>;
